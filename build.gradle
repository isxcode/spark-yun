plugins {
  id 'java'
  id 'checkstyle'
  id 'org.springframework.boot' version "${SPRING_VERSION}"
  id 'io.spring.dependency-management' version "${SPRING_MANAGER_VERSION}"
  id "com.diffplug.spotless" version "${SPOTLESS_VERSION}"
}

def version_number = new File(rootDir.getAbsolutePath(), 'VERSION').readLines()[0].trim()

allprojects {

  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'java-library'
  apply plugin: 'checkstyle'

  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  group = 'com.isxcode.star'
  version = version_number

  repositories {
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url "https://plugins.gradle.org/m2/" }
  }

  configurations.configureEach {
    exclude group: "org.apache.logging.log4j", module: "log4j-slf4j-impl"
    exclude group: "org.slf4j", module: "slf4j-reload4j"
  }

  dependencies {

    // spring-web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // spring-aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // spring-validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // spring-configuration
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // spring-test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // spring-openapi
    implementation "org.springdoc:springdoc-openapi-ui:${OPENAPI_VERSION}"

    // lombok
    compileOnly "org.projectlombok:lombok:${LOMBOK_VERSION}"
    annotationProcessor "org.projectlombok:lombok:${LOMBOK_VERSION}"

    // fastjson
    implementation "com.alibaba:fastjson:${FASTJSON_VERSION}"

    // junit
    implementation "org.junit.jupiter:junit-jupiter:${JUPITER_VERSION}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${JUPITER_VERSION}"

    // mapstruct
    implementation "org.mapstruct:mapstruct:${MAPSTRUCT_VERSION}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${MAPSTRUCT_VERSION}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${MAPSTRUCT_VERSION}"
  }

  configurations {
    compileOnly {
      extendsFrom annotationProcessor
    }
  }

  // checkstyle
  tasks.withType(Checkstyle).configureEach {
    maxWarnings = 100
    maxErrors = 0
    ignoreFailures = false
    config resources.text.fromFile(rootDir.getAbsolutePath() + '/.checkstyle/checkstyle.xml')
    reports {
      xml.required = false
      html.required = true
      html.stylesheet resources.text.fromFile(rootDir.getAbsolutePath() + '/.checkstyle/checkstyle-simple.xsl')
    }
  }
}

// spotless
spotless {
  java {
    target '*/**/*.java'
    targetExclude('*/build/**/*.java')
    targetExclude('spark-yun-dist/**/*.java')
    eclipse()
    removeUnusedImports()
  }
}

// 自定义命令：格式化代码
// gradle format
tasks.register('format', GradleBuild) {

  tasks = [":spotlessApply", ":checkstyleMain"]
}

// 自定义命令：打包项目
// gradle package
tasks.register('package', GradleBuild) {

  tasks = [":spark-yun-dist:make"]
}

// 自定义命令：启动项目
// gradle start
tasks.register('start', GradleBuild) {

  dependsOn(":spark-yun-dist:make")
  tasks = [":spark-yun-backend:spark-yun-main:bootRun"]
}

// 自定义命令：构建docker镜像
// gradle docker
tasks.register('docker', Exec) {

  dependsOn(":spark-yun-dist:make")

  if (System.properties['os.name'].toString().contains('Mac OS X') || System.properties['os.name'].toString().contains('Linux')) {
    commandLine 'sh', '-c', 'docker buildx uninstall && docker build -t isxcode/zhiqingyun:' + version_number + ' -f ./Dockerfile .'
  } else {
    commandLine 'cmd', '/c', 'docker buildx uninstall && docker build -t isxcode/zhiqingyun:' + version_number + ' -f ./Dockerfile .'
  }
}

// 自定义命令：发布docker镜像
// gradle deploy
tasks.register('deploy', Exec) {

  dependsOn(":spark-yun-dist:make")

  if (System.properties['os.name'].toString().contains('Mac OS X') || System.properties['os.name'].toString().contains('Linux')) {
    commandLine 'bash', '-c', '''
      docker buildx install.sh &&
      docker buildx use zhiqingyun-builder &&
      docker buildx build --platform linux/amd64,linux/arm64/v8 -t isxcode/zhiqingyun:''' + version_number + ''' -f ./Dockerfile . --push
    '''
  } else {
    commandLine 'cmd', '/c', '''
      docker buildx install.sh &&
      docker buildx use zhiqingyun-builder &&
      docker buildx build --platform linux/amd64,linux/arm64/v8 -t isxcode/zhiqingyun:''' + version_number + ''' -f ./Dockerfile . --push
    '''
  }
}

// 自定义命令：启动官网
// gradle website
tasks.register('website', Exec) {

  if (System.properties['os.name'].toString().contains('Mac OS X') || System.properties['os.name'].toString().contains('Linux')) {
    commandLine 'sh', '-c', 'cd spark-yun-vip/spark-yun-website && npm i docsify-cli -g && docsify serve docs'
  } else {
    commandLine 'cmd', '/c', 'cd spark-yun-vip/spark-yun-website && npm i docsify-cli -g && docsify serve docs'
  }
}

// 自定义命令：单独启动前端页面
// gradle web
tasks.register('web', Exec) {

  if (System.properties['os.name'].toString().contains('Mac OS X') || System.properties['os.name'].toString().contains('Linux')) {
    commandLine 'sh', '-c', 'cd spark-yun-frontend && npm run dev'
  } else {
    commandLine 'cmd', '/c', 'cd spark-yun-frontend && npm run dev'
  }
}

// 自定义命令：安装项目依赖
// gradle install
tasks.register('install', Exec) {

  if (System.properties['os.name'].toString().contains('Mac OS X') || System.properties['os.name'].toString().contains('Linux')) {
    commandLine 'sh', '-c', 'bash install.sh'
  } else {
    commandLine 'cmd', '/c', 'install.bat'
  }
}